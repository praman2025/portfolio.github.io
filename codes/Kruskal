#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Edge {
    int u, v, weight;
    bool operator<(Edge const &other) {
        return weight < other.weight;
    }
};

int find(int u, vector<int> &parent) {
    if (u == parent[u])
        return u;
    return parent[u] = find(parent[u], parent);
}

void kruskal(int V, vector<Edge> &edges) {
    vector<int> parent(V);
    for (int i = 0; i < V; i++)
        parent[i] = i;

    vector<Edge> mst;
    sort(edges.begin(), edges.end());

    for (Edge edge : edges) {
        int u = find(edge.u, parent);
        int v = find(edge.v, parent);

        if (u != v) {
            mst.push_back(edge);
            parent[u] = v;
        }
    }

    for (auto edge : mst)
        cout << edge.u << " - " << edge.v << " : " << edge.weight << endl;
}

